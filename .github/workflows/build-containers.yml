name: build-containers
on:
  push:
    tags:
      - 'v*' # Trigger only on version tags (e.g., v1.0.0)

env:
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}

jobs:
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        containerfile:
          - boxkit
          - dev-apps
    steps:
      # Free up disk space
      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          df -h

      # Clone code to runner
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      # Extract version from git tag
      - name: Extract version
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: meta
        with:
          images: |
            ${{ matrix.containerfile }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/ublue-os/boxkit/main/README.md

      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@7a95fa7ee0f02d552a32753e7414641a04307056 # v2
        with:
          containerfiles: |
            ./ContainerFiles/${{ matrix.containerfile }}
          image: ${{ matrix.containerfile }}
          tags: ${{ steps.version.outputs.version }} latest
          labels: ${{ steps.meta.outputs.labels }}
          oci: true
          
      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@d0603cd0a7dd490be678164909f65c7737470a7f # v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@5ed88d269cf581ea9ef6dd6806d01562096bee9c # v2
        if: github.event_name != 'pull_request'
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
            
      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
            
      # Sign container
      - name: Install cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          if [ -z "$COSIGN_PRIVATE_KEY" ]; then
            echo "SIGNING_SECRET not configured, skipping image signing"
            exit 0
          fi

          # Debug: print all push outputs
          echo "All push outputs:"
          echo "${{ toJSON(steps.push.outputs) }}"

          # Get the image reference from push outputs
          # The push action outputs the image with tag and digest
          # Format: ghcr.io/owner/image:tag@sha256:digest
          IMAGE_REF='${{ steps.push.outputs.registry-path }}'

          # If registry-path is empty, try to construct it manually
          if [ -z "${IMAGE_REF}" ]; then
            echo "registry-path is empty, constructing image reference manually"
            REGISTRY='${{ steps.registry_case.outputs.lowercase }}'
            IMAGE='${{ matrix.containerfile }}'
            TAG='${{ steps.version.outputs.version }}'
            DIGEST='${{ steps.push.outputs.digest }}'
            IMAGE_REF="${REGISTRY}/${IMAGE}:${TAG}@${DIGEST}"
          fi

          echo "Signing image: ${IMAGE_REF}"

          # Verify the image reference is not empty
          if [ -z "${IMAGE_REF}" ] || [ "${IMAGE_REF}" = "@" ]; then
            echo "ERROR: Could not construct image reference"
            exit 1
          fi

          # Debug: Check if COSIGN_PASSWORD is set
          if [ -z "$COSIGN_PASSWORD" ]; then
            echo "WARNING: COSIGN_PASSWORD is not set"
          else
            echo "COSIGN_PASSWORD is set (length: ${#COSIGN_PASSWORD})"
          fi

          # Sign the image
          cosign sign -y --key env://COSIGN_PRIVATE_KEY "${IMAGE_REF}"
        env:
          COSIGN_EXPERIMENTAL: false
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
